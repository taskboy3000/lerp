#!/usr/bin/env perl
# Joe Johnston <jjohn@taskboy.com>
use Modern::Perl '2018';

use FindBin;
BEGIN {
    if (!exists $ENV{PLERD_HOME}) {
        $ENV{PLERD_HOME}="$FindBin::Bin/..";
    }   
}
use lib "$ENV{PLERD_HOME}/lib";

use Cwd;
use Getopt::Long;
use Path::Class::Dir;
use Plerd;
use Plerd::Config;

# @todo: add locking
Main();
exit;

#--------------
# Subroutines
#--------------
sub Main {
    my %opts;
    GetOptions(
        # commands
        'init' => \$opts{initialize},
        'publish=s' => \$opts{publish},
        'publish-all' => \$opts{publish_all},

        # options
        'c|onfig=s' => \$opts{config},
        'd|base-dir=s' => \$opts{base_dir},
        'force'        => \$opts{force},
        'h|help' => \$opts{usage},
        'v|verbose' => \$opts{verbose},
        'version'   => \$opts{version},
    );

    if ($opts{help}) {
        usage();
    } elsif ($opts{version}){
        version();
    } elsif ($opts{initialize}) {
        initialize($opts{config}, $opts{base_dir}, $opts{verbose});
    } elsif ($opts{publish_all}) {
        publish_all($opts{config}, $opts{verbose}, $opts{force});
    } else {
        usage();
    }

    return;
}

sub usage {
    print <<"EOT";
$0 - manage plerd sites

USAGE:

    $0 [OPTIONS] [COMMAND]

COMMAND:

--init                   Create a new plerd site
--publish-all            Republish all known source files

OPTIONS:

--c|config [FILE]        Name of plerd configuration file to use
--base-dir [DIR]         Directory into which plerd artifacts are copied
--force                  Force the publication of files, even if source has not changed
--verbose                Enable verbose messages
--version                Print plerd version number
--help                   This screen

EOT
}

sub version {
    printf("Plerd version %s\n", $Plerd::VERSION);
}

sub initialize {
    my ($conf_file, $base_dir, $verbose) = @_;

    my $config;
    if (defined $conf_file && -e $conf_file) {
        $config = Plerd::Config->new(config_file => $conf_file);
        $config->unserialize;
    } else {
        my %params;
        if (defined $base_dir) {
            $params{path} = $base_dir;
        }
        if (defined $conf_file) {
            $params{config_file} = $conf_file;
        }
        $config = Plerd::Config->new(%params);
    }

    if ($verbose) {
        printf("Using conf: %s\n", $config->config_file);
    }

    my @messages = $config->initialize;
    if ($verbose) {
        for my $line (@messages) {
            printf("%s\n", $line);
        }
    }
}

sub publish_all {
    my ($conf_file, $verbose, $force) = @_;

    my $config;
    if (defined $conf_file) {
        $config = Plerd::Config->new(config_file => $conf_file);
    } else {
        $config = Plerd::Config->new;
    }

    if (!-e $config->config_file) {
        die("Cannot find plerd config file: " . $config->config_file);
    }

    $config->unserialize;

    my $plerd = Plerd->new(config => $config);
    $plerd->publish_all(verbose => $verbose, force => $force);
}